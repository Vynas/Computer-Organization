"addi", 0, 27, # add 27 to register 0
"la", 0, 3, # add 3 and register 0, then make it MAR = 30
"addi", 1, 8, # add 8 to register 1
"sw", 1, 0, # stores register 1 = 8 into Data_Memory[MAR=30]
"lw", 2, 0, # loads Data_Memory[MAR=30]=8 into register 2
"add", 2, 0, # adds register 2 = 8 and register 0 = 27 into register 2 = 35
"sub", 1, 2, # subtracts register 2 = 35 from register 1 = 8 to make register 1 = -27
"addi", 3, 5, # add 5 to register 3
"ori", 3, 11, # or register 3 = 5 with 11 to make register 3 = 15
"addi", 4, 5, # add 5 to register 4
"nor", 2, 3, # nor register 2 = 35 and register 3 = 15 to make register 2 = 1111..11000
"sll", 4, 3, # shift left register 4 by 3
"slr", 4, 5, # shift right register 4 by 5 to = 1
"addi", 5, 3, # add 3 to register 5
"beq", 5, 7, # branch 7 down if register 5 = 0 (it doesnt)(at PC =14)
"addi", 6, 3, # add 3 to register 6
"sub", 5, 6, # subtract register 6 from register 5 to make register 5 = 0
"beq", 5, 2, # skips 2 instructions if register 5 = 0 (it does, to blt)
"ori", 2, 0, # placeholder
"ori", 2, 0, # placeholder
"blt", 6, 4, # skips 4 instructions if register 6 < 0 (its 3, so no)
"blt", 1, 5, # skips 5 instructions if register 1 < 0 (r1 = -27)(blt is currently at PC = 21)
"ori", 2, 0, # placeholder
"ori", 2, 0, # placeholder
"ori", 2, 0, # placeholder
"j", 31, # jump to PC = 30
"ori", 2, 0, # placeholder
"j", 24, # jump to line 24, three instructions up 
"ori", 2, 0, # placeholder
"ori", 2, 0, # placeholder
"ori", 2, 0, # placeholder
"ori", 2, 0, # placeholder (PC = 31)

should result in:
0000000000011011
1111111111100101
1111111111010000
0000000000001111
0000000000000001
0000000000000000
0000000000000011
